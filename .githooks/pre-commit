#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit hooks...${NC}"

# Get the list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}No staged files found.${NC}"
    exit 0
fi

# Flag to track if any files were modified
FILES_MODIFIED=false

# Process Cairo files
CAIRO_FILES=$(echo "$STAGED_FILES" | grep '\.cairo$' || true)
if [ -n "$CAIRO_FILES" ] && command -v scarb &> /dev/null; then
    echo -e "${BLUE}Formatting Cairo files...${NC}"
    
    # Format Cairo files
    scarb fmt
    
    # Check if formatting changed any files
    for file in $CAIRO_FILES; do
        if ! git diff --exit-code "$file" > /dev/null; then
            echo -e "${YELLOW}Formatted: $file${NC}"
            FILES_MODIFIED=true
        fi
    done
    
    # Run Cairo linting/checks if available
    echo -e "${BLUE}Running Cairo linting...${NC}"
    if ! scarb build; then
        echo -e "${RED}Cairo build check failed. Please fix the issues and try again.${NC}"
        exit 1
    fi
elif [ -n "$CAIRO_FILES" ]; then
    echo -e "${YELLOW}Cairo files found but scarb not available. Skipping Cairo formatting.${NC}"
fi

# Process documentation files (Markdown, YAML, JSON)
DOC_FILES=$(echo "$STAGED_FILES" | grep -E '\.(md|yml|yaml|json)$' | grep -v CLAUDE.md || true)
if [ -n "$DOC_FILES" ] && command -v prettier &> /dev/null; then
    echo -e "${BLUE}Formatting documentation files...${NC}"
    
    # Format documentation files
    echo "$DOC_FILES" | xargs prettier --write
    
    # Check if formatting changed any files
    for file in $DOC_FILES; do
        if ! git diff --exit-code "$file" > /dev/null; then
            echo -e "${YELLOW}Formatted: $file${NC}"
            FILES_MODIFIED=true
        fi
    done
elif [ -n "$DOC_FILES" ]; then
    echo -e "${YELLOW}Documentation files found but prettier not available. Skipping documentation formatting.${NC}"
fi

# If any files were modified, inform the user
if [ "$FILES_MODIFIED" = true ]; then
    echo -e "${YELLOW}"
    echo "Some files were automatically formatted. Please review the changes and re-stage them:"
    echo "  git add <modified-files>"
    echo "  git commit"
    echo -e "${NC}"
    exit 1
fi

echo -e "${GREEN}âœ… All pre-commit checks passed!${NC}"
exit 0